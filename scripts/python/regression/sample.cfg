# This configuration file defines the setup for a particular NU-WRF workflow.
[USERCONFIG]
# The latest code is now stored in a git repository, so one can use:
repo_type=git
# NU-WRF project URL
repo_url=/discover/nobackup/nuwrf/code/nu-wrf.git
# Or enter your personal URL, e.g.
repo_url=/discover/nobackup/<my_uid>/my-nu-wrf-git-clone
# If you are a core-developer:
repo_url=progressdirect:/git/projects/nu-wrf
# Branch name (default is master)
repo_branch=master

# If you really need to test the legacy code use:
repo_type=svn
repo_url=svn+ssh://progressdirect/svn/nu-wrf/code/trunk
repo_branch=

# Filesystem where we are doing all the work. If it does not exist, it will be created.
scratch_dir=<CHANGE_ME>
# Where we keep the regression scripts. Default <repository>/scripts/regression
scripts_dir=<CHANGE_ME_to_repo_url_above>/scripts/python/regression
# Compilation type (release, debug (-O0 -g), traps)
build_type=release
# Where to mail tests report
mail_to=<CHANGE_ME>
#
#
# The following options are not commonly changed:
# Use SLURM batch system on DISCOVER (NASA only)
# If set to 'no', script (and commands therein) will run interactively.
# Such option is preferred when running in debug mode (dry runs).
use_batch=yes
# sponsor ID required by SLURM
sponsor_id=<CHANGE_ME>
# If we are using "modules" to load compilers then set to "yes"
# NOTE: If modules=yes then specify/use modulelist in COMPCONFIG section
# If set to 'no', scripts will use compilers available in the system.
use_modules=yes
# In case we update to CMake.... for now makeOld refers to GNU make.
make_system=makeOld
# Test report message (One sentence, no quotes)
message=Regression testing of NU-WRF code base
use_html=yes
# Clean the regression testing scratch space (under scratchdir)
clean_scratch=yes
#
# Data path for the test cases. Default <project_dir>/regression_testing/data
# where <project_dir> = /discover/nobackup/projects/nu-wrf
# Do not change unless you have the data needed to run a particular test case.
data_dir=/discover/nobackup/projects/nu-wrf/regression_testing/data/Charney
# Location of NU-WRF output baseline files.
# Do not change unless you have baseline files in that location.
baseline_dir=/discover/nobackup/projects/nu-wrf/regression_testing/baselines
# Update baseline_dir with new model answers (change to yes when your code is ready)
update_base=no
# Location of third-party libraries used by NU-WRF
# Variations: intel-sgimpt-bjerknes-p5 , intel-sgimpt-charney-p1, intel-sgimpt (used for Charney)
# If using legacy code (pre-bjerknes-p5) set:
# nuwrflib_dir=/discover/nobackup/projects/nu-wrf/lib/SLES11.3/nuwrflib-8r2/intel
nuwrflib_dir=/discover/nobackup/projects/nu-wrf/lib/intel-sgimpt
# LIS project directory
lis_project_dir=/discover/nobackup/projects/lis
# To use a NU-WRF existing build, define model_dir below.
# If nothing specified then new builds will be created.
model_dir=
# If Executables exist in a separate installation set the following variable:
exe_dir=
# If we want to recreate (setup) a testcase without running the components:
# 1) You have a NU-WRF build (i.e. model_dir/exe_dir are specified).
# 2) You want to 'manually' run individual NU-WRF components
# Then set setup_runs=yes
setup_runs=no


####################
# Test configuration
####################

# ---------------
# A BASIC WRF RUN
# ---------------
[wrf_3iceg_2014rad]
compilers=intel-sgimpt,gnu-mvapich2
npes=1,1,1,28,84
components=geogrid,ungrib,metgrid,real,wrf
expected_output=wrfout_d01_2009-04-10_12:00:00,wrfout_d01_2009-04-10_15:00:00,wrfout_d01_2009-04-10_18:00:00,wrfout_d01_2009-04-10_21:00:00,wrfout_d01_2009-04-11_00:00:00,wrfout_d01_2009-04-11_03:00:00,wrfout_d01_2009-04-11_06:00:00,wrfout_d01_2009-04-11_09:00:00,wrfout_d01_2009-04-11_12:00:00,wrfout_d02_2009-04-10_12:00:00,wrfout_d02_2009-04-10_15:00:00,wrfout_d02_2009-04-10_18:00:00,wrfout_d02_2009-04-10_21:00:00,wrfout_d02_2009-04-11_00:00:00,wrfout_d02_2009-04-11_03:00:00,wrfout_d02_2009-04-11_06:00:00,wrfout_d02_2009-04-11_09:00:00,wrfout_d02_2009-04-11_12:00:00

# Explanation of entries:
#
# [wrf_3iceg_2014rad]
# The name of the test is enclosed in brackets: [wrf_3iceg_2014rad]
#     The name, wrf_3iceg_2014rad, represents the build type + the run type
#     The first substring (before the first _) refers to the build type, i.e. wrf
#     There are only 4 build types in NU-WRF: wrf, wrflis, chem, kpp
#     The rest of the string, 3iceg_2014rad, is the run type (3iceg and 2014 radiation scheme)
#
# compilers:
# Each test will be executed using the computational environment specified in compilers.
#     Currently there are only two working environments: intel-sgimpt and gnu-mvapich2.
#     The computational environmnets are separately specified in the comp.cfg
#     file (also in this directory). To change the computational environment copy
#     the comp.cfg file into a user defined cfg file and edit the settings there.
#
# components:
# Each test consists of running a set of specified components: geogrid,ungrib,metgrid,real,wrf
#
# npes:
# The list of numbers following npes= represents the number of CPUs used to run the
# corresponding component. So, for each component there must be a specified npes entry.
#
# expected_output:
# The run contains an expected_output field. In this case after the wrf run is finished
# the reg script will attempt to compare the run wrf output with the baseline files
# stored in baseline_dir. If expected_output is missing, the comparison will be skipped.
# If the run output differs from the expected_output the final report will report an error.
# verification:
# By default each test will be compiled and run as specified. However the "verification"
# method can be changed to "compile_only". In that case the npes and component entries
# are not needed.

# For example:

[chem_gfed4_gocart]
compilers=intel-sgimpt
verification=compile_only

# Finally, note that if the model_dir= is set above then that is equivalent to
# running in a "run_only" verification mode since the compilation will be skipped.


