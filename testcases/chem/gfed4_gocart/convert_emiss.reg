#############################
# BEGIN CONVERT_EMISS SEGMENT
#############################
THIS=CONVERT_EMISS

cd $RUNDIR || exit 1

# make sure namelist.input.convert_emiss.d01 is present.
if [ ! -e namelist.input.convert_emiss.d01 ] ; then
    echo "$THIS ERROR: namelist.input.convert_emiss.d01 not found!"
    exit 1
fi

if [ ! -e $NUWRFDIR/WRF/run/GODDARDRAD_SSLUT ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/GODDARDRAD_SSLUT does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/GODDARDRAD_SSLUT $RUNDIR/GODDARDRAD_SSLUT || exit 1
if [ ! -e $NUWRFDIR/WRF/run/aerosol.formatted ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/aerosol.formatted does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/aerosol.formatted $RUNDIR/aerosol.formatted || exit 1
if [ ! -e $NUWRFDIR/WRF/run/aerosol_lat.formatted ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/aerosol_lat.formatted does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/aerosol_lat.formatted $RUNDIR/aerosol_lat.formatted || exit 1
if [ ! -e $NUWRFDIR/WRF/run/aerosol_lon.formatted ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/aerosol_lon.formatted does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/aerosol_lon.formatted $RUNDIR/aerosol_lon.formatted || exit 1
if [ ! -e $NUWRFDIR/WRF/run/aerosol_plev.formatted ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/aerosol_plev.formatted does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/aerosol_plev.formatted $RUNDIR/aerosol_plev.formatted || exit 1
if [ ! -e $NUWRFDIR/WRF/run/bulkdens.asc_s_0_03_0_9 ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/bulkdens.asc_s_0_03_0_9 does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/bulkdens.asc_s_0_03_0_9 $RUNDIR/bulkdens.asc_s_0_03_0_9 || exit 1
if [ ! -e $NUWRFDIR/WRF/run/bulkradii.asc_s_0_03_0_9 ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/bulkradii.asc_s_0_03_0_9 does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/bulkradii.asc_s_0_03_0_9 $RUNDIR/bulkradii.asc_s_0_03_0_9 || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CAM_ABS_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CAM_ABS_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CAM_ABS_DATA $RUNDIR/CAM_ABS_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CAM_AEROPT_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CAM_AEROPT_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CAM_AEROPT_DATA $RUNDIR/CAM_AEROPT_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.A1B ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.A1B does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.A1B $RUNDIR/CAMtr_volume_mixing_ratio.A1B || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.A2 ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.A2 does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.A2 $RUNDIR/CAMtr_volume_mixing_ratio.A2 || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.RCP4.5 ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.RCP4.5 does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.RCP4.5 $RUNDIR/CAMtr_volume_mixing_ratio.RCP4.5 || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.RCP6 ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.RCP6 does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.RCP6 $RUNDIR/CAMtr_volume_mixing_ratio.RCP6 || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.RCP8.5 ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.RCP8.5 does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CAMtr_volume_mixing_ratio.RCP8.5 $RUNDIR/CAMtr_volume_mixing_ratio.RCP8.5 || exit 1
if [ ! -e $NUWRFDIR/WRF/run/capacity.asc ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/capacity.asc does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/capacity.asc $RUNDIR/capacity.asc || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CCN_ACTIVATE.BIN ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CCN_ACTIVATE.BIN does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CCN_ACTIVATE.BIN $RUNDIR/CCN_ACTIVATE.BIN || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CLM_ALB_ICE_DFS_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CLM_ALB_ICE_DFS_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CLM_ALB_ICE_DFS_DATA $RUNDIR/CLM_ALB_ICE_DFS_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CLM_ALB_ICE_DRC_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CLM_ALB_ICE_DRC_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CLM_ALB_ICE_DRC_DATA $RUNDIR/CLM_ALB_ICE_DRC_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CLM_ASM_ICE_DFS_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CLM_ASM_ICE_DFS_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CLM_ASM_ICE_DFS_DATA $RUNDIR/CLM_ASM_ICE_DFS_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CLM_ASM_ICE_DRC_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CLM_ASM_ICE_DRC_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CLM_ASM_ICE_DRC_DATA $RUNDIR/CLM_ASM_ICE_DRC_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CLM_DRDSDT0_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CLM_DRDSDT0_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CLM_DRDSDT0_DATA $RUNDIR/CLM_DRDSDT0_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CLM_EXT_ICE_DFS_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CLM_EXT_ICE_DFS_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CLM_EXT_ICE_DFS_DATA $RUNDIR/CLM_EXT_ICE_DFS_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CLM_EXT_ICE_DRC_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CLM_EXT_ICE_DRC_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CLM_EXT_ICE_DRC_DATA $RUNDIR/CLM_EXT_ICE_DRC_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CLM_KAPPA_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CLM_KAPPA_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CLM_KAPPA_DATA $RUNDIR/CLM_KAPPA_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/CLM_TAU_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/CLM_TAU_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/CLM_TAU_DATA $RUNDIR/CLM_TAU_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/co2_trans ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/co2_trans does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/co2_trans $RUNDIR/co2_trans || exit 1
if [ ! -e $NUWRFDIR/WRF/run/coeff_p.asc ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/coeff_p.asc does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/coeff_p.asc $RUNDIR/coeff_p.asc || exit 1
if [ ! -e $NUWRFDIR/WRF/run/coeff_q.asc ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/coeff_q.asc does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/coeff_q.asc $RUNDIR/coeff_q.asc || exit 1
if [ ! -e $NUWRFDIR/WRF/run/constants.asc ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/constants.asc does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/constants.asc $RUNDIR/constants.asc || exit 1
if [ ! -e $NUWRFDIR/WRF/run/ETAMPNEW_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/ETAMPNEW_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/ETAMPNEW_DATA $RUNDIR/ETAMPNEW_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/ETAMPNEW_DATA_DBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/ETAMPNEW_DATA_DBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/ETAMPNEW_DATA_DBL $RUNDIR/ETAMPNEW_DATA_DBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/ETAMPNEW_DATA.expanded_rain ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/ETAMPNEW_DATA.expanded_rain does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/ETAMPNEW_DATA.expanded_rain $RUNDIR/ETAMPNEW_DATA.expanded_rain || exit 1
if [ ! -e $NUWRFDIR/WRF/run/ETAMPNEW_DATA.expanded_rain_DBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/ETAMPNEW_DATA.expanded_rain_DBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/ETAMPNEW_DATA.expanded_rain_DBL $RUNDIR/ETAMPNEW_DATA.expanded_rain_DBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/GENPARM.TBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/GENPARM.TBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/GENPARM.TBL $RUNDIR/GENPARM.TBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/grib2map.tbl ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/grib2map.tbl does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/grib2map.tbl $RUNDIR/grib2map.tbl || exit 1
if [ ! -e $NUWRFDIR/WRF/run/gribmap.txt ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/gribmap.txt does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/gribmap.txt $RUNDIR/gribmap.txt || exit 1
if [ ! -e $NUWRFDIR/WRF/run/kernels.asc_s_0_03_0_9 ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/kernels.asc_s_0_03_0_9 does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/kernels.asc_s_0_03_0_9 $RUNDIR/kernels.asc_s_0_03_0_9 || exit 1
if [ ! -e $NUWRFDIR/WRF/run/kernels_z.asc ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/kernels_z.asc does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/kernels_z.asc $RUNDIR/kernels_z.asc || exit 1
if [ ! -e $NUWRFDIR/WRF/run/LANDUSE.TBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/LANDUSE.TBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/LANDUSE.TBL $RUNDIR/LANDUSE.TBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/masses.asc ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/masses.asc does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/masses.asc $RUNDIR/masses.asc || exit 1
if [ ! -e $NUWRFDIR/WRF/run/MPTABLE.TBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/MPTABLE.TBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/MPTABLE.TBL $RUNDIR/MPTABLE.TBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/ozone.formatted ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/ozone.formatted does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/ozone.formatted $RUNDIR/ozone.formatted || exit 1
if [ ! -e $NUWRFDIR/WRF/run/ozone_lat.formatted ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/ozone_lat.formatted does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/ozone_lat.formatted $RUNDIR/ozone_lat.formatted || exit 1
if [ ! -e $NUWRFDIR/WRF/run/ozone_plev.formatted ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/ozone_plev.formatted does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/ozone_plev.formatted $RUNDIR/ozone_plev.formatted || exit 1
if [ ! -e $NUWRFDIR/WRF/run/RRTM_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/RRTM_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/RRTM_DATA $RUNDIR/RRTM_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/RRTM_DATA_DBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/RRTM_DATA_DBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/RRTM_DATA_DBL $RUNDIR/RRTM_DATA_DBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/RRTMG_LW_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/RRTMG_LW_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/RRTMG_LW_DATA $RUNDIR/RRTMG_LW_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/RRTMG_LW_DATA_DBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/RRTMG_LW_DATA_DBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/RRTMG_LW_DATA_DBL $RUNDIR/RRTMG_LW_DATA_DBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/RRTMG_SW_DATA ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/RRTMG_SW_DATA does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/RRTMG_SW_DATA $RUNDIR/RRTMG_SW_DATA || exit 1
if [ ! -e $NUWRFDIR/WRF/run/RRTMG_SW_DATA_DBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/RRTMG_SW_DATA_DBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/RRTMG_SW_DATA_DBL $RUNDIR/RRTMG_SW_DATA_DBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/SOILPARM.TBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/SOILPARM.TBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/SOILPARM.TBL $RUNDIR/SOILPARM.TBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/termvels.asc ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/termvels.asc does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/termvels.asc $RUNDIR/termvels.asc || exit 1
if [ ! -e $NUWRFDIR/WRF/run/tr49t67 ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/tr49t67 does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/tr49t67 $RUNDIR/tr49t67 || exit 1
if [ ! -e $NUWRFDIR/WRF/run/tr49t85 ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/tr49t85 does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/tr49t85 $RUNDIR/tr49t85 || exit 1
if [ ! -e $NUWRFDIR/WRF/run/tr67t85 ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/tr67t85 does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/tr67t85 $RUNDIR/tr67t85 || exit 1
if [ ! -e $NUWRFDIR/WRF/run/URBPARM.TBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/URBPARM.TBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/URBPARM.TBL $RUNDIR/URBPARM.TBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/URBPARM_UZE.TBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/URBPARM_UZE.TBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/URBPARM_UZE.TBL $RUNDIR/URBPARM_UZE.TBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/VEGPARM.TBL ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/VEGPARM.TBL does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/VEGPARM.TBL $RUNDIR/VEGPARM.TBL || exit 1
if [ ! -e $NUWRFDIR/WRF/run/wind-turbine-1.tbl ] ; then 
    echo "$THIS ERROR: $NUWRFDIR/WRF/run/wind-turbine-1.tbl does not exist!"
    exit 1
fi
ln -fs $NUWRFDIR/WRF/run/wind-turbine-1.tbl $RUNDIR/wind-turbine-1.tbl || exit 1

# Link convert_emiss
ln -fs $EXEDIR/WRF/chem/convert_emiss.exe || exit 1
if [ ! -e $RUNDIR/convert_emiss.exe ] ; then
    echo "$THIS ERROR: convert_emiss.exe does not exist!"
    exit 1
fi

# logs directory
mkdir -p convert_emiss_logs || exit 1

# EMK...numDomains depends on number of namelist files
numDomains=`ls -1 namelist.input.convert_emiss.d0[0-9] | wc -l`

# Loop through each domain. convert_emiss only processes a single domain, so
# creative renaming is necessary to process multiple domains.
domain_total=0
domain_pass=0
for domain in `seq 1 $numDomains` ; do
        
    g=g${domain}

    if [ $domain -lt 10 ] ; then
        d=d0${domain}
    else
        d=d${domain}
    fi

    echo "Processing domain ${d}"

    # Count files, and exit for loop if no files are found for current domain.
    count=`ls -x -1 | grep -e "^wrfinput_${d}$" | wc -l`
    if [ $count -eq 0 ] ; then
        echo "No input files found for domain ${d}; skipping..."
        break
    fi

    echo "Found ${count} input files"

    if [ ! -e namelist.input.convert_emiss.${d} ] ; then
        echo "$THIS ERROR: namelist.input.convert_emiss.${d} not found!"
        exit 1
    fi

    # Make convert_emiss's namelist current
    rm -f namelist.input
    ln -fs namelist.input.convert_emiss.${d} namelist.input || exit 1

    if [ ! -e wrfinput_${d} ] ; then
        echo "$THIS ERROR: wrfinput_${d} does not exist!"
        exit 1
    fi

    mv -f wrfinput_${d} wrfinput_${d}.actual || exit 1 2>/dev/null
    ln -s wrfinput_${d}.actual wrfinput_d01 || exit 1

    # Symbolically link emissions files.
    for link in emissopt3_d01 emissfire_d01 wrf_gocart_backg ; do

        if [ $link = "emissopt3_d01" ] ; then
            abbrev="ab"
        elif [ $link = "emissfire_d01" ] ; then
            abbrev="bb"
        elif [ $link = "wrf_gocart_backg" ] ; then
            abbrev="gocartBG"
        else
            echo "Internal logic error, unknown symlink $link"
            exit 1
        fi

        # Create the symbolic link.
        # FIXME: Need better way of doing this.
        numfiles=`ls -l *${g}-${abbrev}.bin | wc -l`
        if [ $numfiles -ne 1 ] ; then
            echo $numfiles
            echo "$THIS ERROR: found multiple -${g}-${abbrev}.bin files!"
            echo "Do you really need a $link file?"
            exit 1
        fi
        targets=`ls *${g}-${abbrev}.bin`
        for target in $targets ; do
            ln -fs $target $link || exit 1
            if [ ! -e $link ] ; then
                echo "$THIS ERROR: $link does not exist!"
                exit 1
            fi
        done
    done

    # Run convert_emiss
    # WARNING: This program only supports a single process even when compiled
    # with MPI.

    $MPIRUN ./convert_emiss.exe || exit 1

    # Remove symbolic link
    rm -f wrfinput_d01 || exit 1

    # Rename the output files to prevent overwriting from different grid
    if [ -e wrfbiochemi_d01 ] ; then
        mv -f wrfbiochemi_d01 wrfbiochemi_${d}.actual || exit 1 2>/dev/null
    fi
    if [ -e wrfchemi_d01 ] ; then
        mv -f wrfchemi_d01 wrfchemi_${d}.actual || exit 1 2>/dev/null
    fi
    if [ -e wrfchemi_gocart_bg_d01 ] ; then
        mv -f wrfchemi_gocart_bg_d01 wrfchemi_gocart_bg_${d}.actual || exit 1 2>/dev/null
    fi
    if [ -e wrffirechemi_d01 ] ; then
        mv -f wrffirechemi_d01 wrffirechemi_${d}.actual || exit 1 2>/dev/null
    fi

    let "domain_total = domain_total + 1"
    test=`grep "EMISSIONS CONVERSION : end of program" rsl.out.0000 | wc -l`
    if [ $test -eq 1 ] ; then 
      let "domain_pass = domain_pass + 1"
    fi

    # Tidy up logs...
    # Rename the various 'rsl' files to 'convert_emiss.rsl'; this prevents 
    # other processing from overwriting.
    rsl_files=`ls rsl.*`
    for file in $rsl_files ; do
        mv -f $file convert_emiss.${file}.${d} || exit 1 2>/dev/null
    done
    mv -f convert_emiss.rsl.* convert_emiss_logs 2>/dev/null

done

#Harvest date time information from the namelist.input file
iyr=`grep start_year namelist.input | awk -F "=" '{print $2}'| awk -F "," '{print $1}' | sed 's/^[ 	]*//'`
imon=`grep start_month namelist.input | awk -F "=" '{print $2}'| awk -F "," '{print $1}' | sed 's/^[ 	]*//'`
iday=`grep start_day namelist.input | awk -F "=" '{print $2}'| awk -F "," '{print $1}' | sed 's/^[ 	]*//'`
ihr=`grep start_hour namelist.input | awk -F "=" '{print $2}'| awk -F "," '{print $1}' | sed 's/^[ 	]*//'`
imin=`grep start_minute namelist.input | awk -F "=" '{print $2}'| awk -F "," '{print $1}' | sed 's/^[ 	]*//'`
isec=`grep start_second namelist.input | awk -F "=" '{print $2}'| awk -F "," '{print $1}' | sed 's/^[ 	]*//'`

idate="${iyr}-${imon}-${iday}"
itime="${ihr}:${imin}:${isec}"

echo "namelist.input contains the following start date and time: ${idate} ${itime}"

# Restore the original file names
for domain in `seq 1 $numDomains` ; do
    if [ $domain -lt 10 ] ; then
        d=d0${domain}
    else
        d=d${domain}
    fi
    if [ -e wrfinput_${d}.actual ] ; then
        mv -f wrfinput_${d}.actual wrfinput_${d} || exit 1 2>/dev/null
    fi
    if [ -e wrfbiochemi_${d}.actual ] ; then
        mv -f wrfbiochemi_${d}.actual wrfbiochemi_${d} || exit 1 2>/dev/null
    fi
    if [ -e wrfchemi_${d}.actual ] ; then
        mv -f wrfchemi_${d}.actual wrfchemi_${d}_${idate}_${itime} || exit 1 2>/dev/null
    fi
    if [ -e wrfchemi_gocart_bg_${d}.actual ] ; then
        mv -f wrfchemi_gocart_bg_${d}.actual wrfchemi_gocart_bg_${d}_${idate} || exit 1 2>/dev/null
    fi
    if [ -e wrffirechemi_${d}.actual ] ; then
        mv -f wrffirechemi_${d}.actual wrffirechemi_${d}_${idate}_${itime} || exit 1 2>/dev/null
    fi
done

#Final processing check
echo "${domain_pass} out of ${domain_total} domains succeeded" > convert_emiss_results.out
if [ $domain_total -eq $domain_pass ] ; then
  echo "Success" >> convert_emiss_results.out
else
  echo "$THIS ERROR: ${domain_pass} out of ${domain_total} domains failed"
  exit 1
fi

#Tidy up log
mv -f convert_emiss_results.out convert_emiss_logs 2>/dev/null

# The end
echo "Done"
exit 0
